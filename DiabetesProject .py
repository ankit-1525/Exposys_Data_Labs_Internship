# -*- coding: utf-8 -*-
"""DiabetesProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hJ11FSIY8gtjpm4gDvQoZbasyOgfMCdJ

**Importing Depenndencies**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import svm
from sklearn.preprocessing import StandardScaler

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

"""**Printing first five rows of our Dataset**"""

diabetes_dataset.head()

diabetes_dataset.shape

"""**Printing Statistical Data**"""

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

X = diabetes_dataset.drop(columns='Outcome', axis = 1)
# Here it will generate a warining as we are trying to fit dataframe instead of a numpy array,
# although it will perform the desired operation for it is just a warning not an error.
# But for professionalism and neatness in our model we need to eliminate all warnings and errors as possible
# So, here is what I found from Stack Overflow, it will create a numpy array of the dataframe X
# OR we can modify each line of code from the functions fit() and predict() to X.values
X = X.values
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""**Data Standardization**"""

scaler = StandardScaler()

standardized_data = scaler.fit_transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

"""**Seperating training and testing data**"""

# stratify is used to avoid merging of diabetic and non-diabetic dataset in X and Y
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=1, stratify = Y, test_size = 0.2)

print(X.shape, X_train.shape, X_test.shape)

"""**Training the Data**"""

classifier = svm.SVC(kernel = 'linear')

classifier.fit(X_train, Y_train)

X_train_prediction = classifier.predict(X_train)
X_train_accuracy = accuracy_score(X_train_prediction, Y_train)

print(X_train_accuracy)

X_test_prediction = classifier.predict(X_test)
X_test_accuracy = accuracy_score(X_test_prediction, Y_test)

print(X_test_accuracy)

"""**Making a productive Machine**"""

# Takinng the data from the user excluding the outcome column
input_data = (1,85,66,29,0,26.6,0.351,31)
# Converting the tuple format of input into a numpy array
input_as_numpy_array = np.asarray(input_data)
# To make just a single instance out of 768 count of the dataframe we are reshaping the input data
input_data_reshaped = input_as_numpy_array.reshape(1, -1)
# As we have used standardized data for training and testing we need the input data standardized as well
std_input = scaler.transform(input_data_reshaped)

print(std_input)

# This reshaped and standardized data can now be used for predicting the blood glucose level
prediction = classifier.predict(std_input)
print(prediction)

if (prediction[0] == 0):
  print("The person has Diabetes, avoid sugar!")
else:
  print("The person doesn't have Diabetes, Enjoy your extra sugar!")
